<!DOCTYPE html>
<html lang="es">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>NutriJB - Your life Your way Your Diet</title>

<!-- Fuentes modernas -->
<link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;800&family=Pacifico&display=swap" rel="stylesheet" />

<style>
  /* Reset básico */
  * {
    margin: 0; padding: 0; box-sizing: border-box;
  }
  body {
    background: url('https://images.unsplash.com/photo-1506744038136-46273834b3fb?auto=format&fit=crop&w=1470&q=80') no-repeat center center fixed;
    background-size: cover;
    font-family: 'Poppins', sans-serif;
    color: #fff;
    min-height: 100vh;
    display: flex;
    flex-direction: column;
  }

  header {
    background: rgba(0, 60, 0, 0.85);
    padding: 25px 0;
    text-align: center;
    font-family: 'Pacifico', cursive;
    font-size: 3.4rem;
    letter-spacing: 6px;
    font-weight: 800;
    user-select: none;
    color: #a2d149;
    text-shadow: 1px 1px 5px #0a3e00;
  }

  footer {
    background: rgba(0, 40, 0, 0.8);
    padding: 15px 0;
    text-align: center;
    font-style: italic;
    font-size: 1.2rem;
    user-select: none;
    color: #c2f44d;
    font-weight: 600;
    box-shadow: inset 0 0 20px #a2d149;
  }

  main {
    flex-grow: 1;
    padding: 20px 15px 40px;
    max-width: 1200px;
    margin: 0 auto;
  }

  /* Formulario moderno */
  form {
    background: rgba(255 255 255 / 0.15);
    padding: 25px 30px;
    border-radius: 15px;
    box-shadow: 0 0 15px #6fb72fcc;
    margin-bottom: 25px;
    display: grid;
    grid-template-columns: repeat(auto-fit,minmax(160px,1fr));
    gap: 18px;
    font-weight: 600;
    font-size: 0.95rem;
  }

  label {
    display: flex;
    flex-direction: column;
    color: #d6f37a;
  }

  input, select {
    margin-top: 6px;
    padding: 9px 10px;
    border-radius: 8px;
    border: none;
    font-size: 1rem;
    font-weight: 400;
    outline-offset: 2px;
    outline-color: #a2d149;
  }

  /* Botones estilo moderno */
  .btn {
    background: #88c540;
    border: none;
    padding: 12px 24px;
    font-weight: 700;
    font-size: 1.05rem;
    color: #122600;
    border-radius: 10px;
    cursor: pointer;
    box-shadow: 0 4px 8px #67972a88;
    transition: background 0.25s ease, transform 0.2s ease;
    user-select: none;
  }
  .btn:hover {
    background: #a5dd40;
    transform: scale(1.07);
  }
  .btn:active {
    transform: scale(0.95);
  }

  /* Contenedor botones */
  #botonesPlan {
    text-align: center;
    margin-bottom: 25px;
    user-select: none;
  }

  /* Tabla plan mensual */
  table#planMes {
    width: 100%;
    border-collapse: collapse;
    background: rgba(255 255 255 / 0.9);
    color: #222;
    border-radius: 14px;
    overflow: hidden;
    box-shadow: 0 6px 15px #4caf50aa;
  }

  table#planMes th, table#planMes td {
    border: 1px solid #999;
    padding: 10px 14px;
    text-align: center;
    font-size: 0.9rem;
  }
  table#planMes th {
    background-color: #4caf50;
    color: white;
    font-weight: 700;
    letter-spacing: 1.2px;
  }

  /* Animación confeti explosion pequeña */
  .confeti {
    position: absolute;
    pointer-events: none;
    width: 10px;
    height: 10px;
    background-color: #a2d149;
    opacity: 0.9;
    animation: explotarConfeti 700ms forwards;
    border-radius: 2px;
  }

  @keyframes explotarConfeti {
    0% {
      opacity: 0.9;
      transform: translate(0, 0) rotate(0deg) scale(1);
    }
    100% {
      opacity: 0;
      transform: translate(var(--tx, 0px), var(--ty, 0px)) rotate(720deg) scale(0.3);
    }
  }

  /* Animación de carga */
  #loader {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    border: 6px solid #a2d149;
    border-top: 6px solid transparent;
    border-radius: 50%;
    width: 50px;
    height: 50px;
    animation: girar 1s linear infinite;
    display: none;
    z-index: 9999;
  }

  @keyframes girar {
    0% { transform: translate(-50%, -50%) rotate(0deg);}
    100% { transform: translate(-50%, -50%) rotate(360deg);}
  }

</style>
</head>
<body>

<header>NutriJB</header>

<main>
  <form id="formDatos">
    <label>Edad: <input type="number" id="edad" min="10" max="100" required></label>
    <label>Sexo:
      <select id="sexo" required>
        <option value="">Selecciona</option>
        <option value="hombre">Hombre</option>
        <option value="mujer">Mujer</option>
      </select>
    </label>
    <label>Altura (cm): <input type="number" id="altura" min="100" max="250" required></label>
    <label>Peso (kg): <input type="number" id="peso" min="30" max="250" required></label>
    <label>Presupuesto mensual ($): <input type="number" id="presupuesto" min="500" max="20000" required></label>
    <label>Objetivo:
      <select id="objetivo" required>
        <option value="">Selecciona</option>
        <option value="bajar_grasa">Bajar grasa</option>
        <option value="subir_musculo">Subir músculo</option>
      </select>
    </label>
    <label>Tipo de deporte:
      <select id="deporte" required>
        <option value="">Selecciona</option>
        <option value="cardio">Cardio</option>
        <option value="fuerza">Fuerza</option>
        <option value="mixto">Mixto</option>
        <option value="ninguno">Ninguno</option>
      </select>
    </label>
    <label>Alergias (separa por comas, ej: maní, lactosa): <input type="text" id="alergias" placeholder="ej: maní,lactosa"></label>
    <label>Comidas que no te gustan (separa por comas): <input type="text" id="noGustan" placeholder="ej: pescado,cerdo"></label>
    <button type="submit" class="btn">Generar Plan</button>
  </form>

  <div id="botonesPlan" style="display:none;">
    <button id="btnCambiarComida" class="btn">Cambiar Comidas</button>
    <button id="btnCambiarRutina" class="btn">Cambiar Rutina</button>
    <button id="btnSubirDificultad" class="btn">Subir Dificultad Ejercicios</button>
    <span id="nivelDisplay" style="margin-left:15px; font-weight:700; font-size:1.1rem;">Nivel dificultad: 1</span>
  </div>

  <table id="planMes" style="display:none;">
    <thead>
      <tr>
        <th>Día</th>
        <th>Desayuno (g)</th>
        <th>Comida (g)</th>
        <th>Cena (g)</th>
        <th>Snack (g)</th>
        <th>Rutina (Reps / Descanso seg.)</th>
      </tr>
    </thead>
    <tbody></tbody>
  </table>
</main>

<footer>Your life Your way Your Diet</footer>

<div id="loader"></div>

<script>
  // Datos comidas (ejemplo simple, agrega más en producción)
  const desayunos = [
    { nombre: "Avena con frutas", ingredientes: ["avena", "frutas"], precio: 20 },
    { nombre: "Huevos revueltos", ingredientes: ["huevo"], precio: 15 },
    { nombre: "Pan integral con queso", ingredientes: ["pan", "queso"], precio: 18 },
    { nombre: "Yogur natural", ingredientes: ["lactosa"], precio: 12 },
    { nombre: "Smoothie verde", ingredientes: ["espinaca", "banana"], precio: 22 }
  ];
  const comidas = [
    { nombre: "Pechuga a la plancha", ingredientes: ["pollo"], precio: 35 },
    { nombre: "Arroz integral con verduras", ingredientes: ["arroz", "verduras"], precio: 25 },
    { nombre: "Ensalada César", ingredientes: ["lechuga", "pollo", "queso"], precio: 30 },
    { nombre: "Salmón al horno", ingredientes: ["pescado"], precio: 50 },
    { nombre: "Tacos de carne", ingredientes: ["carne"], precio: 28 }
  ];
  const cenas = [
    { nombre: "Sopa de verduras", ingredientes: ["verduras"], precio: 18 },
    { nombre: "Tortilla integral con aguacate", ingredientes: ["aguacate", "pan"], precio: 22 },
    { nombre: "Pescado al vapor", ingredientes: ["pescado"], precio: 40 },
    { nombre: "Ensalada de atún", ingredientes: ["atun"], precio: 30 },
    { nombre: "Omelette de espinacas", ingredientes: ["huevo", "espinaca"], precio: 25 }
  ];
  const snacks = [
    { nombre: "Frutos secos", ingredientes: ["nueces"], precio: 15 },
    { nombre: "Barra de proteína", ingredientes: [], precio: 18 },
    { nombre: "Yogur griego", ingredientes: ["lactosa"], precio: 20 },
    { nombre: "Palitos de zanahoria", ingredientes: ["verduras"], precio: 12 },
    { nombre: "Manzana", ingredientes: ["frutas"], precio: 10 }
  ];

  // Ejercicios base para rutinas
  const ejerciciosBase = {
    pecho_tricep: [
      "Press de banca", "Fondos", "Press inclinado", "Aperturas con mancuernas", "Flexiones",
      "Extensión de tríceps", "Press cerrado", "Pullover", "Press con barra", "Press en máquina",
      "Press con mancuernas", "Dips", "Press declinado", "Press con cable", "Patada de tríceps",
      "Press en banco plano", "Press con barra Z", "Flexiones con aplauso", "Press con mancuernas alterno", "Fondos en paralelas"
    ],
    pierna_abdomen: [
      "Sentadillas", "Peso muerto", "Zancadas", "Elevación de talones", "Prensa de piernas",
      "Crunch abdominal", "Plancha", "Elevación de piernas", "Abdominales bicicleta", "Puente de glúteos",
      "Sentadillas sumo", "Peso muerto rumano", "Step ups", "Crunch en banco", "Plancha lateral",
      "Sentadilla búlgara", "Elevación de talones sentado", "Abdominales con balón", "Mountain climbers", "Russian twist"
    ],
    espalda_hombro_cuello: [
      "Remo con barra", "Jalón al pecho", "Peso muerto", "Encogimientos de hombros", "Press militar",
      "Remo con mancuernas", "Face pull", "Elevaciones laterales", "Remo en máquina", "Elevaciones frontales",
      "Jalón con agarre cerrado", "Press Arnold", "Remo invertido", "Pájaros con mancuernas", "Encogimientos con barra",
      "Press tras nuca", "Remo con cable", "Elevaciones posteriores", "Press con barra", "Remo con agarre supino"
    ]
  };

  // Confeti efecto explosión chiquita al clicar botón
  function explotarConfeti(element) {
    const cantidad = 12;
    for(let i=0; i<cantidad; i++) {
      const confeti = document.createElement("div");
      confeti.classList.add("confeti");
      confeti.style.top = (element.getBoundingClientRect().top + element.offsetHeight/2) + "px";
      confeti.style.left = (element.getBoundingClientRect().left + element.offsetWidth/2) + "px";
      // Movimiento aleatorio
      const tx = (Math.random()*200 - 100) + "px";
      const ty = (Math.random()*-200) + "px";
      confeti.style.setProperty('--tx', tx);
      confeti.style.setProperty('--ty', ty);
      document.body.appendChild(confeti);
      setTimeout(() => confeti.remove(), 700);
    }
  }

  // Obtener valores del form y validación sencilla
  const form = document.getElementById("formDatos");
  form.addEventListener("submit", e => {
    e.preventDefault();

    // Mostrar loader
    document.getElementById("loader").style.display = "block";

    // Espera para simular carga (puedes cambiar a async si haces llamadas reales)
    setTimeout(() => {
      const formData = {
        edad: Number(document.getElementById("edad").value),
        sexo: document.getElementById("sexo").value,
        altura: Number(document.getElementById("altura").value),
        peso: Number(document.getElementById("peso").value),
        presupuesto: Number(document.getElementById("presupuesto").value),
        objetivo: document.getElementById("objetivo").value,
        deporte: document.getElementById("deporte").value,
        alergias: document.getElementById("alergias").value.toLowerCase().split(",").map(s => s.trim()).filter(s => s !== ""),
        no_gustan: document.getElementById("noGustan").value.toLowerCase().split(",").map(s => s.trim()).filter(s => s !== ""),
      };

      generarMostrarPlan(formData);
      document.getElementById("loader").style.display = "none";
    }, 900);
  });

  // Filtrar comidas con alergias y que no gusten
  function filtrarComidas(lista, alergias, noGustan) {
    return lista.filter(item => {
      for (const al of alergias) {
        if(item.ingredientes.some(i => i.includes(al))) return false;
      }
      for (const ng of noGustan) {
        if(item.nombre.toLowerCase().includes(ng)) return false;
      }
      return true;
    });
  }

  // Variables para el plan actual
  let planActual = null;
  let nivelDificultad = 1;
  const MAX_DIFICULTAD = 12;
  let datosGlobales = null;

  // Generar plan mes (30 días)
  function generarPlanMes(formData) {
    const comidasPorDia = (formData.objetivo === "subir_musculo") ? 4 : 3;
    const presupuestoDiario = formData.presupuesto / 30;
    const costoPorGramo = 0.05; // aprox
    const gramosPorComida = Math.floor((presupuestoDiario / costoPorGramo) / comidasPorDia);

    const desayunosFiltrados = filtrarComidas(desayunos, formData.alergias, formData.no_gustan);
    const comidasFiltradas = filtrarComidas(comidas, formData.alergias, formData.no_gustan);
    const cenasFiltradas = filtrarComidas(cenas, formData.alergias, formData.no_gustan);
    const snacksFiltrados = filtrarComidas(snacks, formData.alergias, formData.no_gustan);

    function obtenerAleatorio(arr) {
      if(arr.length === 0) return { nombre: "No disponible", gramos: 0 };
      return arr[Math.floor(Math.random() * arr.length)];
    }

    const plan = [];
    for(let i=1; i<=30; i++) {
      plan.push({
        dia: i,
        desayuno: obtenerAleatorio(desayunosFiltrados),
        comida: obtenerAleatorio(comidasFiltradas),
        cena: obtenerAleatorio(cenasFiltradas),
        snack: (comidasPorDia === 4) ? obtenerAleatorio(snacksFiltrados) : { nombre: "-", gramos: 0 },
        gramos: gramosPorComida,
      });
    }
    return plan;
  }

  // Generar rutina del día (varía con dificultad y día)
  function generarRutinaDia(dia, nivel) {
    // Nivel de dificultad afecta reps y descanso
    const repsBase = 10 + nivel*2;
    const descansoBase = Math.max(15, 45 - nivel*3);

    // Ciclo por días para variar grupos musculares
    let grupo = "";
    if(dia % 3 === 1) grupo = "pecho_tricep";
    else if(dia % 3 === 2) grupo = "pierna_abdomen";
    else grupo = "espalda_hombro_cuello";

    // Selección aleatoria 3 ejercicios
    const ejercicios = [];
    while(ejercicios.length < 3) {
      const ejercicio = ejerciciosBase[grupo][Math.floor(Math.random() * ejerciciosBase[grupo].length)];
      if(!ejercicios.includes(ejercicio)) ejercicios.push(ejercicio);
    }

    // Formato para la tabla: Ejercicio 1: reps / descanso; Ejercicio 2: reps / descanso ...
    const rutinasString = ejercicios.map(ej => `${ej} (${repsBase} reps / ${descansoBase}s)`).join(" | ");

    return rutinasString;
  }

  // Mostrar plan en tabla y botones
  function generarMostrarPlan(formData) {
    datosGlobales = formData;
    nivelDificultad = 1;

    planActual = generarPlanMes(formData);
    actualizarTablaYBotones();
    document.getElementById("botonesPlan").style.display = "block";
  }

  // Actualizar tabla y texto dificultad
  function actualizarTablaYBotones() {
    const tbody = document.querySelector("#planMes tbody");
    tbody.innerHTML = "";

    for(let diaObj of planActual) {
      const tr = document.createElement("tr");

      const rutina = generarRutinaDia(diaObj.dia, nivelDificultad);

      tr.innerHTML = `
        <td>${diaObj.dia}</td>
        <td>${diaObj.desayuno.nombre} (${diaObj.gramos}g)</td>
        <td>${diaObj.comida.nombre} (${diaObj.gramos}g)</td>
        <td>${diaObj.cena.nombre} (${diaObj.gramos}g)</td>
        <td>${diaObj.snack.nombre ? diaObj.snack.nombre + " ("+diaObj.gramos+"g)" : "-"}</td>
        <td style="text-align:left; font-size:0.8rem;">${rutina}</td>
      `;
      tbody.appendChild(tr);
    }
    document.getElementById("planMes").style.display = "table";

    // Actualiza nivel dificultad en texto
    document.getElementById("nivelDisplay").textContent = "Nivel dificultad: " + nivelDificultad;
  }

  // Botones funcionalidad
  document.getElementById("btnCambiarComida").addEventListener("click", e => {
    e.preventDefault();
    explotarConfeti(e.target);
    // Cambiar comidas (mezclar aleatorio las comidas)
    planActual = planActual.map(dia => {
      dia.comida = comidas[Math.floor(Math.random() * comidas.length)];
      return dia;
    });
    actualizarTablaYBotones();
  });

  document.getElementById("btnCambiarRutina").addEventListener("click", e => {
    e.preventDefault();
    explotarConfeti(e.target);
    // Solo se refresca la tabla (rutinas cambian cada vez que se genera)
    actualizarTablaYBotones();
  });

  document.getElementById("btnSubirDificultad").addEventListener("click", e => {
    e.preventDefault();
    explotarConfeti(e.target);
    if(nivelDificultad < MAX_DIFICULTAD) {
      nivelDificultad++;
      actualizarTablaYBotones();
    } else {
      alert("¡Ya alcanzaste el nivel máximo de dificultad!");
    }
  });

</script>

</body>
</html>
